@model List<Employee>

<link href="~/css/detailsof.css" rel="stylesheet" />

<div class="container">
    <div class="card">
        <div class="header">
            <h1>Exam Results</h1>
            <button id="exportBtn" class="export-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                    <polyline points="7 10 12 15 17 10" />
                    <line x1="12" y1="15" x2="12" y2="3" />
                </svg>
                Export CSV
            </button>
        </div>

        <div class="search-container">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="11" cy="11" r="8" />
                <path d="m21 21-4.3-4.3" />
            </svg>
            <input type="text" id="searchInput" placeholder="Search by name, email or score...">
        </div>

        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th data-sort="name">Name <span class="sort-indicator"></span></th>
                        <th data-sort="email">Email <span class="sort-indicator"></span></th>
                        <th data-sort="score">Score <span class="sort-indicator"></span></th>
                    </tr>
                </thead>
                <tbody id="resultsBody">
                    @foreach (var employee in Model)
                    {
                        <tr>
                            <td>@employee.Name</td>
                            <td>@employee.Email</td>
                            <td>@employee.Score</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // Sample data - in a real app this would come from an API/database

    // State management
    let currentSort = {
        key: '',
        direction: 'asc'
    };

    // DOM Elements
    const searchInput = document.getElementById('searchInput');
    const resultsBody = document.getElementById('resultsBody');
    const exportBtn = document.getElementById('exportBtn');
    const tableHeaders = document.querySelectorAll('th[data-sort]');

    // Event Listeners
    searchInput.addEventListener('input', renderResults);
    exportBtn.addEventListener('click', exportToCSV);
    tableHeaders.forEach(header => {
        header.addEventListener('click', () => {
            const key = header.getAttribute('data-sort');
            handleSort(key);
        });
    });

    // Sort handling
    function handleSort(key) {
        if (currentSort.key === key) {
            currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
        } else {
            currentSort.key = key;
            currentSort.direction = 'asc';
        }

        // Update sort indicators
        tableHeaders.forEach(header => {
            if (header.getAttribute('data-sort') === key) {
                header.setAttribute('data-sort-direction', currentSort.direction);
            } else {
                header.removeAttribute('data-sort-direction');
            }
        });

        renderResults();
    }

    // Filter and sort results
    function getFilteredAndSortedResults() {
        const searchTerm = searchInput.value.toLowerCase();

        // Filter results
        const filtered = examResults.filter(result =>
            result.name.toLowerCase().includes(searchTerm) ||
            result.email.toLowerCase().includes(searchTerm) ||
            result.score.toString().includes(searchTerm)
        );

        // Sort results
        if (currentSort.key) {
            filtered.sort((a, b) => {
                if (currentSort.key === 'score') {
                    return currentSort.direction === 'asc'
                        ? a[currentSort.key] - b[currentSort.key]
                        : b[currentSort.key] - a[currentSort.key];
                }

                return currentSort.direction === 'asc'
                    ? a[currentSort.key].localeCompare(b[currentSort.key])
                    : b[currentSort.key].localeCompare(a[currentSort.key]);
            });
        }

        return filtered;
    }

    // Render results
    function renderResults() {
        const results = getFilteredAndSortedResults();

        if (results.length === 0) {
            resultsBody.innerHTML = `
          <tr>
            <td colspan="3" class="empty-message">No results found</td>
          </tr>
        `;
            return;
        }

        resultsBody.innerHTML = results.map(result => `
        <tr>
          <td>${result.name}</td>
          <td>${result.email}</td>
          <td>${result.score}</td>
        </tr>
      `).join('');
    }

    // Export to CSV
    function exportToCSV() {
        const results = getFilteredAndSortedResults();
        const headers = ['Name', 'Email', 'Score'];
        const csvContent = [
            headers.join(','),
            ...results.map(result =>
                [result.name, result.email, result.score].join(',')
            )
        ].join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'exam_results.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }

    // Initial render
    renderResults();
</script>